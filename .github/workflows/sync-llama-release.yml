name: Sync llama.cpp Release

on:
  schedule:
    - cron: "0 * * * *" # Run every hour
  workflow_dispatch: # Allow manual triggering

jobs:
  sync-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Fetch latest llama.cpp release
        id: fetch_release
        run: |
          # Fetch latest release with authentication and error handling
          RESPONSE=$(curl -sL -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/ggml-org/llama.cpp/releases/latest)

          # Check if the API call was successful
          if [ $? -ne 0 ]; then
            echo "ERROR: Failed to fetch latest release from GitHub API"
            exit 1
          fi

          # Check for rate limiting
          if echo "$RESPONSE" | jq -e '.message' | grep -q "API rate limit exceeded"; then
            echo "ERROR: GitHub API rate limit exceeded"
            exit 1
          fi

          # Check for other API errors
          if echo "$RESPONSE" | jq -e '.message' > /dev/null; then
            echo "ERROR: GitHub API error: $(echo "$RESPONSE" | jq -r '.message')"
            exit 1
          fi

          # Extract tag name and validate
          LATEST_RELEASE=$(echo "$RESPONSE" | jq -r '.tag_name')
          if [ "$LATEST_RELEASE" = "null" ] || [ -z "$LATEST_RELEASE" ]; then
            echo "ERROR: Failed to extract tag_name from API response"
            echo "Response: $RESPONSE"
            exit 1
          fi

          echo "Latest llama.cpp release: $LATEST_RELEASE"
          echo "LATEST_RELEASE=$LATEST_RELEASE" >> $GITHUB_ENV

      - name: Check current version in Package.swift
        id: check_current
        run: |
          CURRENT_VERSION=$(grep -oP '(?<=llama-)[^/]+(?=-xcframework\.zip)' Package.swift || echo "")
          if [ -z "$CURRENT_VERSION" ]; then
            echo "ERROR: Could not extract current version from Package.swift. This may indicate a format change or a corrupted file."
            exit 1
          fi
          echo "Current version in Package.swift: $CURRENT_VERSION"
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      - name: Compare versions
        id: compare_versions
        run: |
          if [ "$LATEST_RELEASE" != "$CURRENT_VERSION" ]; then
            echo "New release found: $LATEST_RELEASE (current: $CURRENT_VERSION)"
            echo "UPDATE_NEEDED=true" >> $GITHUB_ENV
          else
            echo "No update needed. Current version: $CURRENT_VERSION"
            echo "UPDATE_NEEDED=false" >> $GITHUB_ENV
          fi

      - name: Get release asset checksum
        if: env.UPDATE_NEEDED == 'true'
        run: |
          # Get release details with authentication and error handling
          RESPONSE=$(curl -sL -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/ggml-org/llama.cpp/releases/tags/$LATEST_RELEASE")

          # Check if the API call was successful
          if [ $? -ne 0 ]; then
            echo "ERROR: Failed to fetch release details from GitHub API"
            exit 1
          fi

          # Check for rate limiting
          if echo "$RESPONSE" | jq -e '.message' | grep -q "API rate limit exceeded"; then
            echo "ERROR: GitHub API rate limit exceeded"
            exit 1
          fi

          # Check for other API errors
          if echo "$RESPONSE" | jq -e '.message' > /dev/null; then
            echo "ERROR: GitHub API error: $(echo "$RESPONSE" | jq -r '.message')"
            exit 1
          fi

          # Get the SHA256 digest from the release assets
          CHECKSUM=$(echo "$RESPONSE" | jq -r '.assets[] | select(.name | endswith("-xcframework.zip")) | .digest' | sed 's/sha256://')

          # Validate checksum was found
          if [ -z "$CHECKSUM" ] || [ "$CHECKSUM" = "null" ]; then
            echo "ERROR: Failed to retrieve checksum for release asset. The 'digest' field is missing or empty."
            echo "Available assets:"
            echo "$RESPONSE" | jq -r '.assets[] | .name'
            exit 1
          fi

          echo "Asset checksum: $CHECKSUM"
          echo "CHECKSUM=$CHECKSUM" >> $GITHUB_ENV

      - name: Update Package.swift
        if: env.UPDATE_NEEDED == 'true'
        run: |
          # Extract current version from Package.swift using sed
          CURRENT_VERSION=$(sed -n 's/.*llama-\([^/]*\)-xcframework\.zip.*/\1/p' Package.swift)
          echo "Current version in Package.swift: $CURRENT_VERSION"

          # Update the URL by replacing the current version with the new one
          sed "s|$CURRENT_VERSION|$LATEST_RELEASE|g" Package.swift > Package.swift.tmp && mv Package.swift.tmp Package.swift

          # Update the checksum - find the current checksum and replace it
          CURRENT_CHECKSUM=$(sed -n 's/.*checksum: "\([^"]*\)".*/\1/p' Package.swift)
          echo "Current checksum: $CURRENT_CHECKSUM"
          sed "s|$CURRENT_CHECKSUM|$CHECKSUM|" Package.swift > Package.swift.tmp && mv Package.swift.tmp Package.swift

          echo "Updated Package.swift with new release $LATEST_RELEASE"

      - name: Update README version
        if: env.UPDATE_NEEDED == 'true'
        run: |
          # Update the version in README.md installation example
          # Convert release tag to version format (e.g., b6816 -> 1.6816.0)
          VERSION_NUMBER=$(echo "$LATEST_RELEASE" | sed 's/^b//')
          README_VERSION="1.${VERSION_NUMBER}.0"
          sed -i "s|\.upToNextMajor(from: \"[^\"]*\"|\.upToNextMajor(from: \"$README_VERSION\"|" README.md
          echo "Updated README.md with version $README_VERSION"

      - name: Verify Package.swift changes
        if: env.UPDATE_NEEDED == 'true'
        run: |
          echo "Updated Package.swift:"
          cat Package.swift

      - name: Verify package resolution
        if: env.UPDATE_NEEDED == 'true'
        run: |
          if ! swift package resolve; then
            echo "ERROR: Package resolution failed."
            exit 1
          fi

      - name: Commit and push changes
        if: env.UPDATE_NEEDED == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
          git add Package.swift README.md
          git commit -m "Update llama.cpp release to $LATEST_RELEASE"
          git push origin main

      - name: Create and push tag
        if: env.UPDATE_NEEDED == 'true'
        run: |
          git tag "$LATEST_RELEASE"
          git push origin "$LATEST_RELEASE"
          echo "Created and pushed tag: $LATEST_RELEASE"
